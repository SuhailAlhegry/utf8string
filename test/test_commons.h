// Copyright 2020 Suhail Alhegry

/*
    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

#ifndef RYUK_TEST_COMMONS_H
#define RYUK_TEST_COMMONS_H

#include "../src/utf8string.h"
#include <iostream>

namespace ryuk {
    namespace tests {
        typedef const char *(*test_func)();

        template<typename T>
        inline void do_not_optimize(T &var) {
        #if __llvm__
            asm volatile ("": "+r,m" (var) : : "memory");
        #else
            const volatile char *temp = reinterpret_cast<const volatile char *>(var);
        #endif
        }

        template<typename T>
        inline void do_not_optimize(const T &var) {
        #if __llvm__
            asm volatile ("": "+r,m" (var) : : "memory");
        #else
            const volatile char *temp = reinterpret_cast<const volatile char *>(var);
        #endif
        }
        
        void run_test(const char *name, test_func func) {
            assert(name);
            assert(func);
            utf8string result(name);
            const char *testResult = func();
            if (testResult != nullptr) {
                result += " failed due to: ";
                result += testResult;
                result += '\n';
            } else {
                result += " passed.\n";
            }

            std::cout << result;
        }

        #define test_assert(val, message) { if (!(val)) { return (message); } }
    };
};

#endif
